; contract: https://github.com/ethereum/eth2.0-specs/blob/v0.8.0/deposit_contract/contracts/validator_registration.v.py

[root]
comment:
k: #execute => _
schedule: PETERSBURG
output: _ => _
status_code: _ => _
call_stack: _
this: ACCT_ID
msg_sender: _
call_data: _
call_value: _
word_stack: .WordStack => _
local_mem: .Map => _
pc: 0 => _
gas: #gas(INIT_GAS, 0, 0) => _
memory_used: 0 => _
call_depth: CALL_DEPTH
log: _ => _
refund: _ => _
coinbase: _
active_accounts: SetItem({THIS}) _:Set
balance: _ => _
storage: _ => _
orig_storage: _ => _
nonce: _ => _
accounts:
requires:
    andBool #range(0 <= CALL_DEPTH < 1024)
ensures:
attribute:

; TODO:
; account 1 has to be active, otherwise there will be branching on <k>: #accountNonexistent(1)
; activeAccounts: SetItem({THIS}) SetItem(1) _:Set

[getHashTreeRoot]
call_data: #abiCallData("get_hash_tree_root", .TypedArgs)
call_value: CALL_VALUE
storage: M
requires:
    andBool CALL_VALUE ==Int 0
    andBool select(M, #hashedLocation({COMPILER}, {DEPOSIT_COUNT}, .IntList)) ==Int DEPOSIT_COUNT
;   andBool select(M, #hashedLocation({COMPILER}, {BRANCH}, .IntList)       ) ==Int BRANCH_0
;   andBool select(M, #hashedLocation({COMPILER}, {BRANCH}, .IntList) +Int 1) ==Int BRANCH_1
;   andBool select(M, #hashedLocation({COMPILER}, {BRANCH}, .IntList) +Int 2) ==Int BRANCH_2
    andBool #rangeUInt(256, DEPOSIT_COUNT)

[getHashTreeRoot-init]
k: #execute
pc: 0 => 689
gas: #gas(INIT_GAS, 0, 0) => #gas(INIT_GAS, 375, 42)
memory_used: 0 => 14
local_mem: .Map => .Map
    ; function hash
    [  28 <- 134 ]
    [  29 <-  58 ]
    [  30 <-  49 ]
    [  31 <-  27 ]
    ; bounds - vyper generated
    [  32 := #buf(32, 1461501637330902918203684832716283019655932542976) ]
    [  64 := #buf(32, 170141183460469231731687303715884105727) ]
    [  96 := #buf(32, 115792089237316195423570985008687907853099843482180094807725896704197245534208) ]
    [ 128 := #buf(32, 1701411834604692317316873037158841057270000000000) ]
    [ 160 := #buf(32, 115792089237316195423570985006986496018665292348323691002298742950633129639936) ]
    ; zero_bytes32: bytes32 = 0x0
    ; node: bytes32 = zero_bytes32
    ; size: uint256 = self.deposit_count
    ; height = 0
    [ 320 := #buf(32, 0) ]
    [ 352 := #buf(32, 0) ]
    [ 384 := #buf(32, DEPOSIT_COUNT) ]
    [ 416 := #buf(32, 0) ]
word_stack: .WordStack => 32 : 416 : .WordStack
; no changes
output: _
status_code: _
log: _
refund: _
balance: _
orig_storage: _
nonce: _
;local_mem:
;   .Map => storeRange(storeRange(storeRange(storeRange(storeRange(storeRange(storeRange(storeRange(storeRange(
;       ; function hash
;        28 |-> 134
;        29 |->  58
;        30 |->  49
;        31 |->  27,
;       ; bounds
;        32, 32, #buf(32, 1461501637330902918203684832716283019655932542976)),
;        64, 32, #buf(32, 170141183460469231731687303715884105727)),
;        96, 32, #buf(32, 115792089237316195423570985008687907853099843482180094807725896704197245534208)),
;       128, 32, #buf(32, 1701411834604692317316873037158841057270000000000)),
;       160, 32, #buf(32, 115792089237316195423570985006986496018665292348323691002298742950633129639936)),
;       ; zero_bytes32: bytes32 = 0x0
;       ; node: bytes32 = zero_bytes32
;       ; size: uint256 = self.deposit_count
;       ; height = 0
;       320, 32, #buf(32, 0)),
;       352, 32, #buf(32, 0)),
;       384, 32, #buf(32, DEPOSIT_COUNT)),
;       416, 32, #buf(32, 0))

[getHashTreeRoot-loop]
k: #execute
pc_loophead: 689
gas_loophead: #gas(INIT_GAS, 375, 42)
memory_used_loophead: 14
local_mem_loophead: .Map
    ; function hash
    [  28 <- 134 ]
    [  29 <-  58 ]
    [  30 <-  49 ]
    [  31 <-  27 ]
    ; bounds - vyper generated
    [  32 := #buf(32, 1461501637330902918203684832716283019655932542976) ]
    [  64 := #buf(32, 170141183460469231731687303715884105727) ]
    [  96 := #buf(32, 115792089237316195423570985008687907853099843482180094807725896704197245534208) ]
    [ 128 := #buf(32, 1701411834604692317316873037158841057270000000000) ]
    [ 160 := #buf(32, 115792089237316195423570985006986496018665292348323691002298742950633129639936) ]
    ; zero_bytes32: bytes32 = 0x0
    ; node: bytes32 = zero_bytes32
    ; size: uint256 = self.deposit_count
    ; height = 0
    [ 320 := #buf(32, 0) ]
    [ 352 := #buf(32, 0) ]
    [ 384 := #buf(32, DEPOSIT_COUNT) ]
    [ 416 := #buf(32, 0) ]
word_stack_loophead: 32 : 416 : .WordStack
; no changes
output: _
status_code: _
log: _
refund: _
balance: _
orig_storage: _
nonce: _

[getHashTreeRoot-loop-1]
pc: {PC_LOOPHEAD} => 963
gas: {GAS_LOOPHEAD} => _
memory_used: {MEMORY_USED_LOOPHEAD} => _
local_mem: {LOCAL_MEM_LOOPHEAD} => {LOCAL_MEM_LOOPHEAD}
    [ 192 := #buf(32, 0) ] /* branch index */
    [ 608 := #buf(32, BRANCH_0) ]
    [ 640 := #buf(32, 0) ] /* node */
    [ 576 := #buf(32, 64) ] /* size of concat */
word_stack: {WORD_STACK_LOOPHEAD} => _
requires:
    andBool DEPOSIT_COUNT &Int 1 ==Int 1

[pgm]
compiler: "Solidity"
; Storage variables:
; branch: bytes32[DEPOSIT_CONTRACT_TREE_DEPTH]
; deposit_count: uint256
; zero_hashes: bytes32[DEPOSIT_CONTRACT_TREE_DEPTH]
branch: 0
deposit_count: 1
zero_hashes: 2
; Constants:
; MIN_DEPOSIT_AMOUNT: constant(uint256) = 1000000000  # Gwei
; DEPOSIT_CONTRACT_TREE_DEPTH: constant(uint256) = 32
; MAX_DEPOSIT_COUNT: constant(uint256) = 4294967295 # 2**DEPOSIT_CONTRACT_TREE_DEPTH - 1
; PUBKEY_LENGTH: constant(uint256) = 48  # bytes
; WITHDRAWAL_CREDENTIALS_LENGTH: constant(uint256) = 32  # bytes
; AMOUNT_LENGTH: constant(uint256) = 8  # bytes
; SIGNATURE_LENGTH: constant(uint256) = 96  # bytes
deposit_contract_tree_depth: 32
code: ""
