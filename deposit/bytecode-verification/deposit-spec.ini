; contract: https://github.com/ethereum/eth2.0-specs/blob/v0.8.0/deposit_contract/contracts/validator_registration.v.py

[root]
comment:
k: #execute => _
schedule: PETERSBURG
output: _ => _
status_code: _ => _
call_stack: _
this: ACCT_ID
msg_sender: MSG_SENDER
call_data: _
call_value: CALL_VALUE
word_stack: .WordStack => _
local_mem: .Map => _
pc: 0 => _
gas: #gas(INIT_GAS, 0, 0) => _
memory_used: 0 => _
call_depth: CALL_DEPTH
log: _ => _
refund: _ => _
coinbase: _
active_accounts:
balance1: BALANCE_OLD
balance2: _
storage: _ => _
orig_storage: _ => _
nonce1: NONCE_OLD
nonce2: _
accounts:
requires:
    // conditions
    andBool #range(0 <= CALL_DEPTH < 1024)
    // types
    andBool #rangeUInt(256, INIT_GAS)
ensures:
attribute:

[getHashTreeRoot]
call_data: #abiCallData("get_hash_tree_root", .TypedArgs)
call_value: CALL_VALUE
storage: M
+requires:
    // conditions
    andBool CALL_VALUE ==Int 0
    // types
    andBool #rangeUInt(256, DEPOSIT_COUNT)
    andBool isStorage(M)
    // let-bindings
    andBool DEPOSIT_COUNT ==Int select(M, #hashedLocation({COMPILER}, {DEPOSIT_COUNT}, .IntList))
word_stack_init: 32 : 416 : .WordStack

[getHashTreeRoot-init]
k: #execute
local_mem_init: .Map
    ; function hash
    [  28 <- 134 ]
    [  29 <-  58 ]
    [  30 <-  49 ]
    [  31 <-  27 ]
    ; bounds - vyper generated
    [  32 := #buf(32, 1461501637330902918203684832716283019655932542976) ]
    [  64 := #buf(32, 170141183460469231731687303715884105727) ]
    [  96 := #buf(32, 115792089237316195423570985008687907853099843482180094807725896704197245534208) ]
    [ 128 := #buf(32, 1701411834604692317316873037158841057270000000000) ]
    [ 160 := #buf(32, 115792089237316195423570985006986496018665292348323691002298742950633129639936) ]
    ; locals
    [ 320 := #buf(32, 0) ]              /* zero_bytes32: bytes32 = 0x0 */
    [ 352 := #buf(32, 0) ]              /* node: bytes32 = zero_bytes32 */
    [ 384 := #buf(32, DEPOSIT_COUNT) ]  /* size: uint256 = self.deposit_count */
    [ 416 := #buf(32, 0) ]              /* height = 0 */
+requires:
    // let-bindings
    andBool BRANCH_0 ==Int select(M, #hashedLocation({COMPILER}, {BRANCH}, 0))
    andBool NODE_1 ==Int #sha256(#buf(32, BRANCH_0) ++ #buf(32, 0))
; no changes
output: _
status_code: _
log: _
refund: _
balance2: {BALANCE1}
orig_storage: _
nonce2: {NONCE1}

[getHashTreeRoot-init-beforeLoop]
pc: 0 => 689
gas: #gas(INIT_GAS, 0, 0) => #gas(INIT_GAS, 375, 42)
memory_used: 0 => 14
local_mem: .Map => {LOCAL_MEM_INIT}
word_stack: .WordStack => {WORD_STACK_INIT}

[getHashTreeRoot-init-afterFirstLoopIter]
pc: 689 => 960
word_stack: {WORD_STACK_INIT} => 1 : {WORD_STACK_INIT}
; ignore sub-function-call garbages
output: _ => _
status_code: _ => _

[getHashTreeRoot-init-afterFirstLoopIter-1]
gas: #gas(INIT_GAS, 375, 42) => #gas(INIT_GAS, Cgascap(PETERSBURG, #gas(INIT_GAS, 812, 63), #gas(INIT_GAS, 812, 63), 700) +Int 1512 -Int INIT_GAS +Int 1003, 126)
memory_used: 14 => 21
local_mem: {LOCAL_MEM_INIT} => {LOCAL_MEM_INIT}
    [ 192 := #buf(32, 0) ]                              /* branch storage index = 0 */
    [ 608 := #buf(32, BRANCH_0) ]                       /* branch[0] */
    [ 640 := #buf(32, 0) ]                              /* node */
    [ 576 := #buf(32, 64) ]                             /* size of sha256 input */
    [ 192 := #buf(32, NODE_1) ]                         /* sha256 return value */
    [ 352 := #buf(32, NODE_1) ]                         /* update node */
    [ 384 := #buf(32, chop(DEPOSIT_COUNT /Int 2)) ]     /* update size */
    [ 416 := #buf(32, 1) ]                              /* update height */
+requires:
    // conditions
    andBool DEPOSIT_COUNT &Int 1 ==Int 1

[getHashTreeRoot-init-afterFirstLoopIter-2]
+requires:
    // conditions
    andBool DEPOSIT_COUNT &Int 1 =/=Int 1

[getHashTreeRoot-loop]
k: #execute
pc_loophead: 960
gas_loophead: #gas(INIT_GAS, 0, 0)
memory_used_loophead: 21
local_mem_loophead: .Map
    ; function hash
    [  28 <- 134 ]
    [  29 <-  58 ]
    [  30 <-  49 ]
    [  31 <-  27 ]
    ; bounds - vyper generated
    [  32 := #buf(32, 1461501637330902918203684832716283019655932542976) ]
    [  64 := #buf(32, 170141183460469231731687303715884105727) ]
    [  96 := #buf(32, 115792089237316195423570985008687907853099843482180094807725896704197245534208) ]
    [ 128 := #buf(32, 1701411834604692317316873037158841057270000000000) ]
    [ 160 := #buf(32, 115792089237316195423570985006986496018665292348323691002298742950633129639936) ]
    ; locals
    [ 320 := #buf(32, 0) ]          /* zero_bytes32: bytes32 = 0x0 */
    [ 352 := #buf(32, NODE) ]       /* node: bytes32 */
    [ 384 := #buf(32, SIZE) ]       /* size: uint256 */
    [ 416 := #buf(32, HEIGHT) ]     /* height */
    ; garbages
    [ 192 := #buf(32, _) ]          /* sha256 return value */
    [ 608 := #buf(32, _) ]          /* branch lookup */
    [ 640 := #buf(32, _) ]          /* node */
    [ 576 := #buf(32, _) ]          /* size of sha256 input */
+requires:
    // conditions
    andBool #range(0 <= HEIGHT <= 32)
    // types
    andBool #rangeUInt(256, NODE)
    andBool #rangeUInt(256, SIZE)
    // let-bindings
    andBool BRANCH_HEIGHT ==Int select(M, #hashedLocation({COMPILER}, {BRANCH}, HEIGHT))
    andBool NODE_NEW ==Int #sha256(#buf(32, BRANCH_HEIGHT) ++ #buf(32, NODE))
; ignore sub-function-call changes
output: _ => _
status_code: _ => _
; no changes
log: _
refund: _
balance2: {BALANCE1}
orig_storage: _
nonce2: {NONCE1}

[getHashTreeRoot-loop-1]
pc: {PC_LOOPHEAD}
gas: {GAS_LOOPHEAD} => #gas(INIT_GAS, Cgascap(PETERSBURG, #gas(INIT_GAS, 459, 0), #gas(INIT_GAS, 459, 0), 700) +Int 1159 -Int INIT_GAS +Int 650, 0)
memory_used: {MEMORY_USED_LOOPHEAD}
local_mem: {LOCAL_MEM_LOOPHEAD} => {LOCAL_MEM_LOOPHEAD}
    [ 192 := #buf(32, 0) ]                      /* branch storage index = 0 */
    [ 608 := #buf(32, BRANCH_HEIGHT) ]          /* branch[height] */
    [ 640 := #buf(32, NODE) ]                   /* node */
    [ 576 := #buf(32, 64) ]                     /* size of sha256 input */
    [ 192 := #buf(32, NODE_NEW) ]               /* sha256 return value */
    [ 352 := #buf(32, NODE_NEW) ]               /* update node */
    [ 384 := #buf(32, chop(SIZE /Int 2)) ]      /* update size */
    [ 416 := #buf(32, HEIGHT +Int 1) ]          /* update height */
word_stack: (HEIGHT => HEIGHT +Int 1) : {WORD_STACK_INIT}
+requires:
    // conditions
    andBool HEIGHT <Int 32
    andBool SIZE &Int 1 ==Int 1

[getHashTreeRoot-loop-2]
+requires:
    // conditions
    andBool HEIGHT <Int 32
    andBool SIZE &Int 1 =/=Int 1

[getHashTreeRoot-loop-exit]
pc: {PC_LOOPHEAD} => 1287
gas: {GAS_LOOPHEAD} => _
memory_used: {MEMORY_USED_LOOPHEAD} => _
local_mem: {LOCAL_MEM_LOOPHEAD} => _
;   [ 1120 := #buf(32, NODE) ]
;   [  704 := #buf(32, 2154246793) ] /* 0x80673289 */
;   [  736 := #buf(32, DEPOSIT_COUNT) ]
word_stack: HEIGHT : {WORD_STACK_INIT} => _
+requires:
    // conditions
    andBool HEIGHT ==Int 32

; pc: 1030 => 155 to_little_endian
; pc: ... => 1031 return address



[to_little_endian_64]
k: #execute
pc: {PC_BEGIN} => {PC_END}
word_stack: {WORD_STACK_BEGIN} => {WORD_STACK_END}
local_mem: {LOCAL_MEM_BEGIN} => {LOCAL_MEM_END}
; return_val: selectRange({LOCAL_MEM_END}, 736, 32)
return_val: #asWord(#bufSeg(#buf(32, Y8), 24, 8) ++ #buf(8, 0) ++ selectRange({LOCAL_MEM_BEGIN}, 752, 16))
loop_bound: 8
slice_length: 8
pc_begin:  155
pc_middle: 373
pc_end:    628
word_stack_begin:  RETURN_ADDR : VALUE                 : WS /* WS saves caller's local vars */
word_stack_middle: {LOOP_BOUND} : 448                  : WS
word_stack_end:    RETURN_ADDR : 32 : 8 : {RETURN_VAL} : WS
local_mem_begin: MEM
local_mem_middle: {LOCAL_MEM_BEGIN}
    [ 352 := #buf(32, RETURN_ADDR) ]
    [ 320 := #buf(32, VALUE) ]
    [ 384 := #buf(32, Y8) ]             /* y: uint256 = (y << 8) + bitwise_and(x, 255) */
    [ 416 := #buf(32, X8) ]             /* x: uint256 = (x >> 8) */
    [ 448 := #buf(32, {LOOP_BOUND}) ]   /* for-loop index */
    [ 480 := #buf(32, X7 &Int 255) ]    /* bitwise_and(x, 255) */
local_mem_end: {LOCAL_MEM_MIDDLE}
    [ 544 := #buf(32, Y8) ]
    [ 536 := #buf(32, {SLICE_LENGTH}) ]
    [ 704 := #buf(32, {SLICE_LENGTH}) ++ #bufSeg(#buf(32, Y8), 24, {SLICE_LENGTH}) ]
    [ 800 := #buf(32, 16) ]
    [ 744 <- 0 ]
    [ 745 <- 0 ]
    [ 746 <- 0 ]
    [ 747 <- 0 ]
    [ 748 <- 0 ]
    [ 749 <- 0 ]
    [ 750 <- 0 ]
    [ 751 <- 0 ]
    [ 672 := #buf(32, 32) ]
    [ 640 := #buf(32, 0) ]
gas: #gas(INIT_GAS, 0, 0) => _
memory_used: MEMORY_USED => _
+requires:
    // conditions
    andBool #range(0 <= #sizeWordStack(WS) <= 100) // TODO: precise max stack size
    andBool #range(0 <= MEMORY_USED <= 100) // TODO: precise value
    andBool #rangeUInt(256, RETURN_ADDR)
    andBool #rangeUInt(256, VALUE)
    // let-bindings
    andBool X1 ==Int VALUE /Int 256
    andBool X2 ==Int X1    /Int 256
    andBool X3 ==Int X2    /Int 256
    andBool X4 ==Int X3    /Int 256
    andBool X5 ==Int X4    /Int 256
    andBool X6 ==Int X5    /Int 256
    andBool X7 ==Int X6    /Int 256
    andBool X8 ==Int X7    /Int 256
    //
    andBool Y1 ==Int                  VALUE &Int 255
    andBool Y2 ==Int (Y1 *Int 256) +Int (X1 &Int 255)
    andBool Y3 ==Int (Y2 *Int 256) +Int (X2 &Int 255)
    andBool Y4 ==Int (Y3 *Int 256) +Int (X3 &Int 255)
    andBool Y5 ==Int (Y4 *Int 256) +Int (X4 &Int 255)
    andBool Y6 ==Int (Y5 *Int 256) +Int (X5 &Int 255)
    andBool Y7 ==Int (Y6 *Int 256) +Int (X6 &Int 255)
    andBool Y8 ==Int (Y7 *Int 256) +Int (X7 &Int 255)
; no changes
log: _
refund: _
storage: _
orig_storage: _
balance2: {BALANCE1}
nonce2: {NONCE1}

[to_little_endian_64-forloop]
pc: {PC_BEGIN} => {PC_MIDDLE}
word_stack: {WORD_STACK_BEGIN} => {WORD_STACK_MIDDLE}
local_mem: {LOCAL_MEM_BEGIN} => {LOCAL_MEM_MIDDLE}
;   ; save call stack args
;   [ 352 := #buf(32, RETURN_ADDR) ]
;   [ 320 := #buf(32, VALUE) ]
;   ; init locals
;   [ 384 := #buf(32, 0) ]                  /* y: uint256 = 0 */
;   [ 416 := #buf(32, VALUE) ]              /* x: uint256 = value */
;   [ 448 := #buf(32, 0) ]                  /* init for-loop index */
;   ; loop body (pc: 189 <-> 372)
;   [ 384 := #buf(32, 0) ]                  /* y = shift(y, 8) */ /* y << 8 */
;   [ 480 := #buf(32, VALUE &Int 255) ]     /* bitwise_and(x, 255) */
;   [ 384 := #buf(32, VALUE &Int 255) ]     /* y = y + bitwise_and(x, 255) */
;   [ 416 := #buf(32, VALUE /Int 256) ]     /* x = shift(x, -8) */ /* x >> 8 */
;   [ 448 := #buf(32, 1) ]                  /* increase for-loop index */
;   ; ... repeat loop body ...
; TODO: precise gas cost
; <gas>(#gas(INIT_GAS_2251:Int,, Int(#"3199"),, _+Int_(_-Int_(Cmem(PETERSBURG_EVM(.KList),, #memoryUsageUpdate(MEMORY_USED_2189:Int,, Int(#"352"),, Int(#"32"))),, Cmem(PETERSBURG_EVM(.KList),, MEMORY_USED_2189:Int)),, _-Int_(Cmem(PETERSBURG_EVM(.KList),, #memoryUsageUpdate(MEMORY_USED_2189:Int,, Int(#"480"),, Int(#"32"))),, Cmem(PETERSBURG_EVM(.KList),, #memoryUsageUpdate(MEMORY_USED_2189:Int,, Int(#"352"),, Int(#"32")))))))
; <memoryUsed>(#memoryUsageUpdate(MEMORY_USED_2189:Int,, Int(#"480"),, Int(#"32")))

[to_little_endian_64-return]
pc: {PC_MIDDLE} => {PC_END}
word_stack: {WORD_STACK_MIDDLE} => {WORD_STACK_END}
local_mem: {LOCAL_MEM_MIDDLE} => {LOCAL_MEM_END}
;   [ 544 := #buf(32, Y8) ]                 /* memcpy 384 -> 544 */
;   [ 536 := #buf(32, 8) ]                  /* slice by overwrite */
;   [ 704 := #buf(32, 8) ++ #bufSeg(#buf(32, Y8), 24, 8)) ]         /* prepareing for return value*/
;
;   [ 800 := #buf(32, 8) ]
;   [ 744 <- 0 ]
;   [ 800 := #buf(32, 9) ]
;   [ 745 <- 0 ]
;   ...
;   [ 751 <- 0 ]                            /* padding */
;   [ 800 := #buf(32, 16) ]                 /* padding loop index */
;
;   [ 672 := #buf(32, 32) ]
;   [ 640 := #buf(32, 96) ]
;   [ 640 := #buf(32, 64) ]
;   [ 640 := #buf(32, 32) ]
;   [ 640 := #buf(32, 0) ]
; TODO: precise gas cost
; <gas>(#gas(INIT_GAS_2364:Int,, _+Int_(_+Int_(_-Int_(_+Int_(_+Int_(_-Int_(_+Int_(Cgascap(PETERSBURG_EVM(.KList),, Int(#"21"),, #gas(INIT_GAS_2364:Int,, Int(#"84"),, _-Int_(Cmem(PETERSBURG_EVM(.KList),, #memoryUsageUpdate(MEMORY_USED_2302:Int,, Int(#"544"),, Int(#"32"))),, Cmem(PETERSBURG_EVM(.KList),, MEMORY_USED_2302:Int))),, Int(#"700")),, Int(#"784")),, INIT_GAS_2364:Int),, Cgascap(PETERSBURG_EVM(.KList),, Int(#"22"),, #gas(INIT_GAS_2364:Int,, _+Int_(_-Int_(_+Int_(Cgascap(PETERSBURG_EVM(.KList),, Int(#"21"),, #gas(INIT_GAS_2364:Int,, Int(#"84"),, _-Int_(Cmem(PETERSBURG_EVM(.KList),, #memoryUsageUpdate(MEMORY_USED_2302:Int,, Int(#"544"),, Int(#"32"))),, Cmem(PETERSBURG_EVM(.KList),, MEMORY_USED_2302:Int))),, Int(#"700")),, Int(#"784")),, INIT_GAS_2364:Int),, Int(#"180")),, _+Int_(_-Int_(Cmem(PETERSBURG_EVM(.KList),, #memoryUsageUpdate(MEMORY_USED_2302:Int,, Int(#"544"),, Int(#"32"))),, Cmem(PETERSBURG_EVM(.KList),, MEMORY_USED_2302:Int)),, _-Int_(Cmem(PETERSBURG_EVM(.KList),, #memoryUsageUpdate(MEMORY_USED_2302:Int,, Int(#"704"),, Int(#"40"))),, Cmem(PETERSBURG_EVM(.KList),, MEMORY_USED_2302:Int)))),, Int(#"700"))),, Int(#"880")),, INIT_GAS_2364:Int),, _+Int_(_-Int_(_+Int_(Cgascap(PETERSBURG_EVM(.KList),, Int(#"21"),, #gas(INIT_GAS_2364:Int,, Int(#"84"),, _-Int_(Cmem(PETERSBURG_EVM(.KList),, #memoryUsageUpdate(MEMORY_USED_2302:Int,, Int(#"544"),, Int(#"32"))),, Cmem(PETERSBURG_EVM(.KList),, MEMORY_USED_2302:Int))),, Int(#"700")),, Int(#"784")),, INIT_GAS_2364:Int),, Int(#"201"))),, Int(#"1185")),, _+Int_(_+Int_(_+Int_(_-Int_(Cmem(PETERSBURG_EVM(.KList),, #memoryUsageUpdate(MEMORY_USED_2302:Int,, Int(#"544"),, Int(#"32"))),, Cmem(PETERSBURG_EVM(.KList),, MEMORY_USED_2302:Int)),, _-Int_(Cmem(PETERSBURG_EVM(.KList),, #memoryUsageUpdate(MEMORY_USED_2302:Int,, Int(#"704"),, Int(#"40"))),, Cmem(PETERSBURG_EVM(.KList),, MEMORY_USED_2302:Int))),, _+Int_(_-Int_(Cmem(PETERSBURG_EVM(.KList),, #memoryUsageUpdate(MEMORY_USED_2302:Int,, Int(#"544"),, Int(#"32"))),, Cmem(PETERSBURG_EVM(.KList),, MEMORY_USED_2302:Int)),, _-Int_(Cmem(PETERSBURG_EVM(.KList),, #memoryUsageUpdate(MEMORY_USED_2302:Int,, Int(#"704"),, Int(#"40"))),, Cmem(PETERSBURG_EVM(.KList),, MEMORY_USED_2302:Int)))),, _-Int_(Cmem(PETERSBURG_EVM(.KList),, #memoryUsageUpdate(MEMORY_USED_2302:Int,, Int(#"800"),, Int(#"32"))),, Cmem(PETERSBURG_EVM(.KList),, #memoryUsageUpdate(MEMORY_USED_2302:Int,, Int(#"704"),, Int(#"40")))))))
; <memoryUsed>(#memoryUsageUpdate(MEMORY_USED_2302:Int,, Int(#"800"),, Int(#"32")))




; [getHashTreeRoot-loop-back]
; pc: 960 => {PC_LOOPHEAD}
;
; [getHashTreeRoot-loop-exit]
; pc: 960 => 967

[pgm]
compiler: "Vyper"
; Storage variables:
; branch: bytes32[DEPOSIT_CONTRACT_TREE_DEPTH]
; deposit_count: uint256
; zero_hashes: bytes32[DEPOSIT_CONTRACT_TREE_DEPTH]
branch: 0
deposit_count: 1
zero_hashes: 2
; Constants:
; MIN_DEPOSIT_AMOUNT: constant(uint256) = 1000000000  # Gwei
; DEPOSIT_CONTRACT_TREE_DEPTH: constant(uint256) = 32
; MAX_DEPOSIT_COUNT: constant(uint256) = 4294967295 # 2**DEPOSIT_CONTRACT_TREE_DEPTH - 1
; PUBKEY_LENGTH: constant(uint256) = 48  # bytes
; WITHDRAWAL_CREDENTIALS_LENGTH: constant(uint256) = 32  # bytes
; AMOUNT_LENGTH: constant(uint256) = 8  # bytes
; SIGNATURE_LENGTH: constant(uint256) = 96  # bytes
deposit_contract_tree_depth: 32
code: ""
